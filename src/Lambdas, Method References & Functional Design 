# **Lambdas, Method References & Functional Design**

- Functional Programming
    - **Readability:** Code becomes shorter and more purposeful.
    - **Parallelism: It can easily use multi-core processors in the background.**
- Functional Interfaces

    An interface that has only one **abstract** method. This makes it clear which method the lambda expression implements. Java introduces the `@FunctionalInterface` annotation to prevent accidentally adding a second abstract method to an interface.

    - Example

        ![image.png](attachment:bfe452a6-a61c-4ed8-8897-8715fc4c5646:image.png)

- Template functional interfaces:
    - `Predicate<T>`

        It accepts an object and returns a boolean (true/false). (For example, x > 10).

    - `Function<T, R>`

        It accepts an object (T) and returns a different object (R). (For example, converting a String to an Integer).

    - `Consumer<T>`

        It accepts an object and returns nothing (`void`). (For example, `System.out.println()`).

    - `Supplier<T>`

        It doesn't accept anything, but returns an object. (For example, creating a new object).

- The Evolution of Lambda Syntax

    ![image.png](attachment:fe998c62-9f5b-4393-aec1-3dfef5070d12:image.png)

    Java knows list is String, can also guess name.

    ![image.png](attachment:ef54feab-7fab-434f-b481-839f1572ab6d:image.png)

    Only one parameter, can also throw(omit) the parentheses.

    ![image.png](attachment:2a13b24e-48c8-48ee-817a-432adebb7036:image.png)

    Body of the method consists of only one statement, we can also omit the curly braces {}.

    ![image.png](attachment:83ca5e07-24cf-4883-b12d-2757d65ed980:image.png)

- Method References

    Syntax: `Object/Class:: MethodName`

    - Static method reference: `ClassName::staticMethodName`

        ![image.png](attachment:2385b799-03d1-4492-b14e-f9024c56e3c2:image.png)

    - Reference to an object's instance method: `objectReference::instanceMethodName` Java

        ![image.png](attachment:af429a3a-6aff-42eb-9065-585271381808:image.png)

    - The first parameter is the object that is calling the method.

        ![image.png](attachment:3001b487-553a-4446-88d9-c8155c6630e5:image.png)

    - Constructor reference: `ClassName::new` Java

        ![image.png](attachment:1f8e308d-7ba2-4633-8178-fcfbbf17a6c4:image.png)

- Functional Solution (with Stream API and Lambda)

    ![image.png](attachment:f59d74f3-0681-4012-bfd0-f9ec18987207:image.png)

- Comparison

    **Functional code:**  shorter and clearly states (express) "what it does": "filter, map (köçür), collect".

    **Imperative code (**with a traditional **`for`** loop**):** on the other hand, explains "how it does it" step by step: "create a new list, start a loop, check the condition, calculate, add to the list...".

    The functional approach can be easily parallelized. Just write .parallelStream() instead of .stream().